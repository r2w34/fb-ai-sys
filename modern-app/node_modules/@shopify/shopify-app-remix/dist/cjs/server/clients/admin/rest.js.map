{"version":3,"file":"rest.js","sources":["../../../../../../src/server/clients/admin/rest.ts"],"sourcesContent":["import {\n  DeleteRequestParams,\n  GetRequestParams,\n  PostRequestParams,\n  PutRequestParams,\n  RequestParams,\n  Session,\n  Shopify,\n  ShopifyRestResources,\n} from '@shopify/shopify-api';\n\nimport type {AdminClientOptions} from './types';\n\nexport type RestClientWithResources<Resources extends ShopifyRestResources> =\n  RemixRestClient & {resources: Resources};\n\nexport function restClientFactory<\n  Resources extends ShopifyRestResources = ShopifyRestResources,\n>({\n  params,\n  handleClientError,\n  session,\n}: AdminClientOptions): RestClientWithResources<Resources> {\n  const {api} = params;\n  const client = new RemixRestClient({\n    params,\n    handleClientError,\n    session,\n  }) as RestClientWithResources<Resources>;\n\n  if (api.rest) {\n    client.resources = {} as Resources;\n\n    const RestResourceClient = restResourceClientFactory({\n      params,\n      handleClientError,\n      session,\n    });\n\n    Object.entries(api.rest).forEach(([name, resource]) => {\n      class RemixResource extends resource {\n        public static Client = RestResourceClient;\n      }\n\n      Reflect.defineProperty(RemixResource, 'name', {\n        value: name,\n      });\n\n      Reflect.set(client.resources, name, RemixResource);\n    });\n  }\n\n  return client;\n}\n\nclass RemixRestClient {\n  public session: Session;\n  private params: AdminClientOptions['params'];\n  private handleClientError: AdminClientOptions['handleClientError'];\n\n  constructor({params, session, handleClientError}: AdminClientOptions) {\n    this.params = params;\n    this.handleClientError = handleClientError;\n    this.session = session;\n  }\n\n  /**\n   * Performs a GET request on the given path.\n   *\n   * @deprecated In a future major release REST will be removed from this package. Please see [all-in on graphql](https://www.shopify.com/ca/partners/blog/all-in-on-graphql).\n   */\n  public async get(params: GetRequestParams) {\n    return this.makeRequest({\n      method: 'GET' as RequestParams['method'],\n      ...params,\n    });\n  }\n\n  /**\n   * Performs a POST request on the given path.\n   *\n   * @deprecated In a future major release REST will be removed from this package. Please see [all-in on graphql](https://www.shopify.com/ca/partners/blog/all-in-on-graphql).\n   */\n  public async post(params: PostRequestParams) {\n    return this.makeRequest({\n      method: 'POST' as RequestParams['method'],\n      ...params,\n    });\n  }\n\n  /**\n   * Performs a PUT request on the given path.\n   *\n   * @deprecated In a future major release REST will be removed from this package. Please see [all-in on graphql](https://www.shopify.com/ca/partners/blog/all-in-on-graphql).\n   */\n  public async put(params: PutRequestParams) {\n    return this.makeRequest({\n      method: 'PUT' as RequestParams['method'],\n      ...params,\n    });\n  }\n\n  /**\n   * Performs a DELETE request on the given path.\n   *\n   * @deprecated In a future major release REST will be removed from this package. Please see [all-in on graphql](https://www.shopify.com/ca/partners/blog/all-in-on-graphql).\n   */\n  public async delete(params: DeleteRequestParams) {\n    return this.makeRequest({\n      method: 'DELETE' as RequestParams['method'],\n      ...params,\n    });\n  }\n\n  protected async makeRequest(params: RequestParams): Promise<Response> {\n    const originalClient = new this.params.api.clients.Rest({\n      session: this.session,\n    });\n    const originalRequest = Reflect.get(originalClient, 'request');\n\n    try {\n      const apiResponse = await originalRequest.call(originalClient, params);\n\n      // We use a separate client for REST requests and REST resources because we want to override the API library\n      // client class to return a Response object instead.\n      return new Response(JSON.stringify(apiResponse.body), {\n        headers: apiResponse.headers,\n      });\n    } catch (error) {\n      if (this.handleClientError) {\n        throw await this.handleClientError({\n          error,\n          session: this.session,\n          params: this.params,\n        });\n      } else throw new Error(error);\n    }\n  }\n}\n\nfunction restResourceClientFactory({\n  params,\n  handleClientError,\n  session,\n}: AdminClientOptions): Shopify['clients']['Rest'] {\n  const {api} = params;\n\n  const ApiClient = api.clients.Rest;\n  return class RestResourceClient extends ApiClient {\n    protected async request(requestParams: RequestParams) {\n      const originalClient = new api.clients.Rest({session});\n      const originalRequest = Reflect.get(originalClient, 'request');\n\n      try {\n        // We just call through to the API library client, and handle the error response here, so that data parsing\n        // behaves the same way.\n        return await originalRequest.call(originalClient, requestParams);\n      } catch (error) {\n        if (handleClientError) {\n          throw await handleClientError({error, params, session});\n        } else throw new Error(error);\n      }\n    }\n  };\n}\n"],"names":[],"mappings":"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"}